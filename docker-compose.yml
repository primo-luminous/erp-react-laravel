# ---------------------------
# ERP (React + Laravel) Stack
# ---------------------------

x-healthcheck: &default-healthcheck
  interval: 10s
  timeout: 5s
  retries: 5
  start_period: 15s

services:
  # -------------------------
  # Backend: Laravel (php-fpm)
  # -------------------------
  api:
    build:
      context: .
      dockerfile: ./infra/docker/api/Dockerfile
    container_name: erp-api
    env_file: [.env]               # โหลดตัวแปรจาก root .env (จะส่งผ่านไปหา API ด้วย)
    environment:
      APP_ENV: ${APP_ENV:-local}
      APP_DEBUG: ${APP_DEBUG:-true}
      APP_URL: ${APP_URL:-http://localhost}
      DB_HOST: db
      DB_PORT: 5432
      DB_DATABASE: ${DB_DATABASE:-erp}
      DB_USERNAME: ${DB_USERNAME:-erp}
      DB_PASSWORD: ${DB_PASSWORD:-erp}
      REDIS_HOST: redis
      REDIS_PORT: 6379
      QUEUE_CONNECTION: redis
      MAIL_HOST: mailhog
      MAIL_PORT: 1025
      SCOUT_DRIVER: meilisearch
      MEILISEARCH_HOST: http://meilisearch:7700
      FILESYSTEM_DISK: s3
      AWS_ENDPOINT: http://minio:9000
      AWS_USE_PATH_STYLE_ENDPOINT: "true"
      AWS_ACCESS_KEY_ID: ${MINIO_ROOT_USER:-minio}
      AWS_SECRET_ACCESS_KEY: ${MINIO_ROOT_PASSWORD:-minio123}
      AWS_DEFAULT_REGION: ap-southeast-1
      AWS_BUCKET: ${S3_BUCKET:-erp-local}
      PHP_OPCACHE_VALIDATE_TIMESTAMPS: "1"
    volumes:
      - ./apps/api:/var/www/html
      - api_vendor:/var/www/html/vendor
      - api_storage:/var/www/html/storage
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_started
    expose: ["9000"]               # php-fpm
    healthcheck:
      <<: *default-healthcheck
      test: ["CMD", "php", "-v"]
    profiles: ["dev","prod"]

  # -------------------------
  # Queue Worker (Horizon)
  # -------------------------
  queue:
    image: erp-api
    container_name: erp-queue
    working_dir: /var/www/html
    env_file: [.env]
    environment:
      APP_ENV: ${APP_ENV:-local}
      QUEUE_CONNECTION: redis
      DB_HOST: db
      REDIS_HOST: redis
    volumes:
      - ./apps/api:/var/www/html
      - api_vendor:/var/www/html/vendor
      - api_storage:/var/www/html/storage
    command: bash -lc "php artisan queue:work --verbose --tries=3 --timeout=90"
    depends_on:
      api:
        condition: service_started
      redis:
        condition: service_started
    profiles: ["dev","prod"]
    restart: unless-stopped

  # -------------------------
  # Scheduler (Laravel)
  # -------------------------
  scheduler:
    image: erp-api
    container_name: erp-scheduler
    working_dir: /var/www/html
    env_file: [.env]
    environment:
      APP_ENV: ${APP_ENV:-local}
      DB_HOST: db
      REDIS_HOST: redis
    volumes:
      - ./apps/api:/var/www/html
      - api_vendor:/var/www/html/vendor
      - api_storage:/var/www/html/storage
    command: bash -lc "while true; do php artisan schedule:run --verbose --no-interaction; sleep 60; done"
    depends_on:
      api:
        condition: service_started
    profiles: ["dev","prod"]
    restart: unless-stopped

  # -------------------------
  # Frontend: React (Vite)
  #   - dev: ใช้ Vite dev server (5173)
  #   - prod: build แล้วเสิร์ฟผ่าน Nginx
  # -------------------------
  web:
    build:
      context: .
      dockerfile: ./infra/docker/web/Dockerfile
    container_name: erp-web
    env_file: [.env]
    environment:
      VITE_API_BASE_URL: ${VITE_API_BASE_URL:-/api/v1}
      # สำหรับ dev server ให้ hot reload
      CHOKIDAR_USEPOLLING: "true"
    volumes:
      - ./apps/web:/app
      - web_node_modules:/app/node_modules
      - web_dist:/app/dist
    command: sh -c "npm install && npm run dev -- --host 0.0.0.0"
    ports:
      - "5173:5173"   # dev (vite)
    healthcheck:
      <<: *default-healthcheck
      test: ["CMD", "node", "-v"]
    profiles: ["dev"]

  # -------------------------
  # Reverse Proxy (Nginx)
  #   - รวม FE (dist) + API (php-fpm upstream)
  # -------------------------
  nginx:
    image: nginx:1.27-alpine
    container_name: erp-nginx
    volumes:
      - ./infra/docker/nginx/default.conf:/etc/nginx/conf.d/default.conf:ro
      - web_dist:/usr/share/nginx/html:ro
      - ./apps/api/public:/var/www/html/public:ro
    ports:
      - "80:80"
    depends_on:
      api:
        condition: service_started
    healthcheck:
      <<: *default-healthcheck
      test: ["CMD", "wget", "-qO-", "http://localhost/ || exit 1"]
    profiles: ["dev","prod"]
    restart: unless-stopped

  # -------------------------
  # Database: PostgreSQL
  # -------------------------
  db:
    image: postgres:16
    container_name: erp-db
    environment:
      POSTGRES_USER: ${DB_USERNAME:-erp}
      POSTGRES_PASSWORD: ${DB_PASSWORD:-erp}
      POSTGRES_DB: ${DB_DATABASE:-erp}
      PGDATA: /var/lib/postgresql/data/pgdata
    volumes:
      - pgdata:/var/lib/postgresql/data
      - ./infra/db/init:/docker-entrypoint-initdb.d:ro
    ports:
      - "5432:5432"
    healthcheck:
      <<: *default-healthcheck
      test: ["CMD-SHELL", "pg_isready -U ${DB_USERNAME:-erp} -d ${DB_DATABASE:-erp}"]
    profiles: ["dev","prod"]
    restart: unless-stopped

  # -------------------------
  # Redis (cache/queue)
  # -------------------------
  redis:
    image: redis:7-alpine
    container_name: erp-redis
    command: ["redis-server", "--save", "", "--appendonly", "no"]
    ports:
      - "6379:6379"
    healthcheck:
      <<: *default-healthcheck
      test: ["CMD", "redis-cli", "ping"]
    profiles: ["dev","prod"]
    restart: unless-stopped

  # -------------------------
  # Mailhog (dev mail)
  # -------------------------
  mailhog:
    image: mailhog/mailhog
    container_name: erp-mailhog
    ports:
      - "8025:8025"
    profiles: ["dev"]
    restart: unless-stopped

  # -------------------------
  # Meilisearch (Full-text)
  # -------------------------
  meilisearch:
    image: getmeili/meilisearch:v1.12
    container_name: erp-meilisearch
    environment:
      MEILI_NO_ANALYTICS: "true"
    ports:
      - "7700:7700"
    volumes:
      - meili_data:/meili_data
    profiles: ["dev","prod"]
    restart: unless-stopped

  # -------------------------
  # MinIO (S3-compatible storage)
  # -------------------------
  minio:
    image: quay.io/minio/minio:latest
    container_name: erp-minio
    command: server /data --console-address ":9001"
    environment:
      MINIO_ROOT_USER: ${MINIO_ROOT_USER:-minio}
      MINIO_ROOT_PASSWORD: ${MINIO_ROOT_PASSWORD:-minio123}
    ports:
      - "9000:9000"   # S3 endpoint
      - "9001:9001"   # Console
    volumes:
      - minio_data:/data
    healthcheck:
      <<: *default-healthcheck
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
    profiles: ["dev","prod"]
    restart: unless-stopped

  # -------------------------
  # pgAdmin (DB Admin UI)
  # -------------------------
  pgadmin:
    image: dpage/pgadmin4:8
    container_name: erp-pgadmin
    environment:
      PGADMIN_DEFAULT_EMAIL: ${PGADMIN_EMAIL:-admin@example.com}
      PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_PASSWORD:-admin123}
    ports:
      - "5050:80"
    volumes:
      - pgadmin_data:/var/lib/pgadmin
    depends_on:
      db:
        condition: service_started
    profiles: ["dev"]
    restart: unless-stopped

  # -------------------------
  # FE Builder (Production build)
  #   ใช้เรียกครั้งเดียวเพื่อสร้าง dist แล้วให้ Nginx เสิร์ฟ
  # -------------------------
  web-builder:
    build:
      context: .
      dockerfile: ./infra/docker/web/Dockerfile
    container_name: erp-web-builder
    env_file: [.env]
    environment:
      VITE_API_BASE_URL: ${VITE_API_BASE_URL:-/api/v1}
    working_dir: /app
    command: ["bash","-lc","npm ci && npm run build"]
    volumes:
      - ./apps/web:/app
      - web_node_modules:/app/node_modules
      - web_dist:/app/dist
    profiles: ["prod"]

networks:
  default:
    name: erp-net

volumes:
  pgdata:
  api_vendor:
  api_storage:
  web_node_modules:
  web_dist:
  meili_data:
  minio_data:
  pgadmin_data:
